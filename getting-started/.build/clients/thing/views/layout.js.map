{"version":3,"names":["chalk","Layout","constructor","client","components","Set","lastComponentOutput","Map","addComponent","comp","add","render","deleteComponent","delete","requestUpdate","forEach","last","get","value","console","log","green","role","id","set","createLayout","$layout"],"sources":["../../../../src/clients/thing/views/layout.js"],"sourcesContent":["import chalk from 'chalk';\n\n/**\n * This simple layout is provided for convenience, feel free to edit or even\n * remove it if you want to use you own logic.\n *\n * The general goal is to provide an API that mimics the one of `lit` allowing\n * to reuse higher level abstractions created to target browsers (e.g. Contexts)\n * with minimal adaptation of the code.\n *\n * @example\n * const $layout = createLayout(client, $container);\n * const myComponent = {\n *   render() {\n *     if (client.target === 'browser') {\n *       return html`<h1>${Math.random()}</h1>`\n *     } else {\n *       return Math.random();\n *     }\n *   },\n * };\n * $layout.addComponent(myComponent);\n * setInterval(() => $layout.requestUpdate(), 1000);\n */\nclass Layout {\n  constructor(client) {\n    this.client = client;\n    this.components = new Set();\n\n    this.lastComponentOutput = new Map(); // <comp, lastStrValue>\n  }\n\n  addComponent(comp) {\n    this.components.add(comp);\n    this.render();\n  }\n\n  deleteComponent(comp) {\n    this.components.delete(comp);\n    this.render();\n  }\n\n  // mimic lit API\n  requestUpdate() {\n    this.render();\n  }\n\n  render() {\n    // write a new log only if the result of the component render is different\n    // from the last call.\n    this.components.forEach(comp => {\n      const last = this.lastComponentOutput.get(comp);\n      const value = comp.render ? comp.render() : comp;\n\n      if (last !== value) {\n        console.log(chalk.green(`[${this.client.role} ${this.client.id}]`), value);\n        this.lastComponentOutput.set(comp, value);\n      }\n    });\n  }\n}\n\nexport default function createLayout(client) {\n  const $layout = new Layout(client);\n  return $layout;\n}\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,MAAM,CAAC;EACXC,WAAW,CAACC,MAAM,EAAE;IAClB,IAAI,CAACA,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,UAAU,GAAG,IAAIC,GAAG,EAAE;IAE3B,IAAI,CAACC,mBAAmB,GAAG,IAAIC,GAAG,EAAE,CAAC,CAAC;EACxC;;EAEAC,YAAY,CAACC,IAAI,EAAE;IACjB,IAAI,CAACL,UAAU,CAACM,GAAG,CAACD,IAAI,CAAC;IACzB,IAAI,CAACE,MAAM,EAAE;EACf;EAEAC,eAAe,CAACH,IAAI,EAAE;IACpB,IAAI,CAACL,UAAU,CAACS,MAAM,CAACJ,IAAI,CAAC;IAC5B,IAAI,CAACE,MAAM,EAAE;EACf;;EAEA;EACAG,aAAa,GAAG;IACd,IAAI,CAACH,MAAM,EAAE;EACf;EAEAA,MAAM,GAAG;IACP;IACA;IACA,IAAI,CAACP,UAAU,CAACW,OAAO,CAACN,IAAI,IAAI;MAC9B,MAAMO,IAAI,GAAG,IAAI,CAACV,mBAAmB,CAACW,GAAG,CAACR,IAAI,CAAC;MAC/C,MAAMS,KAAK,GAAGT,IAAI,CAACE,MAAM,GAAGF,IAAI,CAACE,MAAM,EAAE,GAAGF,IAAI;MAEhD,IAAIO,IAAI,KAAKE,KAAK,EAAE;QAClBC,OAAO,CAACC,GAAG,CAACpB,KAAK,CAACqB,KAAK,CAAE,IAAG,IAAI,CAAClB,MAAM,CAACmB,IAAK,IAAG,IAAI,CAACnB,MAAM,CAACoB,EAAG,GAAE,CAAC,EAAEL,KAAK,CAAC;QAC1E,IAAI,CAACZ,mBAAmB,CAACkB,GAAG,CAACf,IAAI,EAAES,KAAK,CAAC;MAC3C;IACF,CAAC,CAAC;EACJ;AACF;AAEA,eAAe,SAASO,YAAY,CAACtB,MAAM,EAAE;EAC3C,MAAMuB,OAAO,GAAG,IAAIzB,MAAM,CAACE,MAAM,CAAC;EAClC,OAAOuB,OAAO;AAChB"}
